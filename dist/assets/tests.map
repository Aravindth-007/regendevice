{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","regendevice/tests/lint/app.lint-test.js","regendevice/tests/lint/templates.template.lint-test.js","regendevice/tests/lint/tests.lint-test.js","regendevice/tests/test-helper.js","regendevice/tests/unit/routes/addnewphone-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"regendevice/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/addnewphone.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/addnewphone.js should pass ESLint\\n\\n');\n  });\n});","define(\"regendevice/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('regendevice/templates/addnewphone.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'regendevice/templates/addnewphone.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('regendevice/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'regendevice/templates/application.hbs should pass TemplateLint.\\n\\nregendevice/templates/application.hbs\\n  7:6  error  If the `alt` attribute is present and the value is an empty string, `role=\"presentation\"` or `role=\"none\"` must be present  require-valid-alt-text\\n');\n  });\n});","define(\"regendevice/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/addnewphone-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/addnewphone-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"regendevice/tests/test-helper\", [\"regendevice/app\", \"regendevice/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"regendevice/tests/unit/routes/addnewphone-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | addnewphone', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:addnewphone');\n      assert.ok(route);\n    });\n  });\n});","define('regendevice/config/environment', [], function() {\n  var prefix = 'regendevice';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('regendevice/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}